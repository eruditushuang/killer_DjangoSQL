<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.335" timestamp="2024-07-26T10:53:45.771951" hostname="T14NB900"><testcase classname="tests.test_movie_report.TestMovieReport" name="test_get" file="tests\test_movie_report.py" line="77" time="0.027"><failure message="AttributeError: 'tuple' object has no attribute 'keys'">self = &lt;tests.test_movie_report.TestMovieReport testMethod=test_get&gt;

    def test_get(self):
        report = MovieReport(self.repo)
    
        for i, data in enumerate(TEST_DATA):
            args, expected = data
            with self.subTest(i=i):
                args[-1] = self._convert_to_categories(args[-1])
&gt;               result = report.get(*args)

tests\test_movie_report.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
sqlmovies\movie_report.py:52: in get
    return self.repository.session.execute(query, params).fetchall()
.venv\Lib\site-packages\sqlalchemy\orm\session.py:1291: in execute
    return self._connection_for_bind(bind, close_with_result=True).execute(
.venv\Lib\site-packages\sqlalchemy\engine\base.py:1011: in execute
    return meth(self, multiparams, params)
.venv\Lib\site-packages\sqlalchemy\sql\elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;sqlalchemy.engine.base.Connection object at 0x000001DF1C763050&gt;
elem = &lt;sqlalchemy.sql.elements.TextClause object at 0x000001DF1C763C50&gt;
multiparams = ((None, None, None, 1),), params = {}

    def _execute_clauseelement(self, elem, multiparams, params):
        """Execute a sql.ClauseElement object."""
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_execute:
                elem, multiparams, params = fn(self, elem, multiparams, params)
    
        distilled_params = _distill_params(multiparams, params)
        if distilled_params:
            # ensure we don't retain a link to the view object for keys()
            # which links to the values, which we don't want to cache
&gt;           keys = list(distilled_params[0].keys())
E           AttributeError: 'tuple' object has no attribute 'keys'

.venv\Lib\site-packages\sqlalchemy\engine\base.py:1090: AttributeError</failure></testcase></testsuite></testsuites>